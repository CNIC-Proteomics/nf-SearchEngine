/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    - Default config options for all compute environments
    - The process parameters are defined here
    - The list of profiles is defined here
----------------------------------------------------------------------------------------
*/


/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Variable environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    //
    // Output folders
    //
    outdir                     = null
    paramdir                   = "${params.outdir}/params"
    logdir                     = "${params.outdir}/logs"
    tracedir                   = "${params.outdir}/pipeline_info"
    //
    // Boilerplate options
    //
    help                       = false
    version                    = false
    monochrome_logs            = false
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

process {
    //
    // Publish Directory
    //
    publishDir  = [
        path: { 
            // if ( task.tag ) { "${params.outdir}/modules/${task.process.tokenize(':')[-2].toLowerCase()}/${task.tag}_${task.process.tokenize(':')[-1].toLowerCase()}" }
            if ( task.tag ) { "${params.outdir}/modules/${task.tag}_${task.process.tokenize(':')[-1].toLowerCase()}" }
            else { "${params.outdir}/modules/${task.process.tokenize(':')[-2].toLowerCase()}/${task.process.tokenize(':')[-1].toLowerCase()}" }        
        },
        // path: { "${params.outdir}/modules/${task.tag}_${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: 'copy',
        //overwrite: true,
        saveAs: { filename ->
            if (filename.indexOf(".log") > 0) { "../../../logs/${task.process.tokenize(':')[-2].toLowerCase()}#${filename.replace('.log','')}.log" }
            else if (filename.indexOf("_log.txt") > 0) { "../../../logs/${task.process.tokenize(':')[-2].toLowerCase()}#${filename.replace('_log.txt','')}.log" }
            else { filename }
        }
    ]
}


/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Process parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The default for the CPU, memory and time
----------------------------------------------------------------------------------------
*/

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Max resource options
params {
    //
    // Defaults only, expecting to be overwritten
    //
    max_memory                 = '32.GB'
    max_cpus                   = 8
    max_time                   = '24.h'
}

process {
    //
    // Check the defaults for all processes
    //
    cpus   = { check_max( 4    * task.attempt, 'cpus'   ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    //
    // Process-specific resource requirements
    //
    withLabel:process_long_time {
        time   = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}


/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Profiles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The several profiles are defined here but the custom parameters are in each file.
----------------------------------------------------------------------------------------
*/

profiles {    
    singularity {
        singularity.enabled         = true
        singularity.autoMounts      = true
        docker.enabled              = false
        singularity.runOptions      = "-e -B /home:/home"
    }
}
