/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ptmcompass Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'
    logdir                     = "${params.outdir}/logs"
    tracedir                   = "${params.outdir}/pipeline_info"
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'modules'
    singularity_pull_docker_container = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 40
    max_time                   = '240.h'

}

// Defatul params for the workflows
includeConfig 'params/search_engine.config'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        //docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        //singularity.runOptions = "-e -B /mnt/tierra:/mnt/tierra"
    }
    test            { includeConfig 'conf/test.config'      }
}


// Load module config after profile, so they can depend on overwritten input parameters specific for each profile.
// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'


// Export these environment variables
env {
    DECOYPYRAT_HOME           = "/opt/search_engine/dbscripts/src"
    THERMORAWFILEPARSER_HOME  = "/opt/search_engine/thermorawfileparser"    
    MSFRAGGER_HOME            = "/opt/search_engine/msfragger"
    MZEXTRACTOR_HOME          = "/opt/search_engine/mz_extractor"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'ptm-compass'
    author          = """Jose RodrÃ­guez"""
    homePage        = 'https://github.com/CNIC-Proteomics/ptm-compass'
    description     = """PTM-compass workflow"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.3'
    version         = '0.0.1'
    doi             = ''
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
