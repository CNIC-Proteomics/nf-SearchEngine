Bootstrap: library
From: ubuntu:22.04

%labels
    Author jmrodriguezc@cnic.es
    Version v0.1.1

%help
    This Singularity container is used for the PTM pipelines:
    1. SearchEngine

%arguments
    # Declare local folder
    SEARCH_LOCAL=search_engine

    # Declare variables
    # SEARCH_ENGINE ---------------------------------------------------------------------------------------------
    SEARCH_HOME=/opt/search_engine
    
    # MSFRAGGER: Declare the file name (with version)
    MSF_FILE_NAME=MSFragger-4.1
    MSF_HOME=/opt/search_engine/msfragger

    # THERMORAWPARSER: Declare the file name (with version)
    RAWPARSER_FILE_NAME=ThermoRawFileParser1.4.2
    RAWPARSER_HOME=/opt/search_engine/thermorawfileparser

    # DECOYPYRAT: Setting up variables (with version)
    BIODATAHUB_VERSION=v2.13
    BIODATAHUB_HOME=/opt/search_engine/biodatahub

    # MZ_EXTRACTOR: Setting up variables (with version)
    MZEXTRACTOR_VERSION=v1.0
    MZEXTRACTOR_HOME=/opt/search_engine/mzextractor
    

%environment
    # Export env
    # export MSF_HOME RAWPARSER_HOME

%setup
    # Create the home
    mkdir -p "${SINGULARITY_ROOTFS}{{SEARCH_HOME}}"

    # Create the ThermoRawFileParser home
    mkdir -p "${SINGULARITY_ROOTFS}{{RAWPARSER_HOME}}"

%files
    # SEARCH_ENGINE ---------------------------------------------------------------------------------------------
    # Obtain the MSFragger file
    {{SEARCH_LOCAL}}/{{MSF_FILE_NAME}}.zip {{SEARCH_HOME}}/MSFragger.zip

    # Obtain ThermoRawFileParser
    {{SEARCH_LOCAL}}/{{RAWPARSER_FILE_NAME}}.zip {{SEARCH_HOME}}/ThermoRawFileParser.zip

%post
    # Install main packages
    apt-get update -y
    apt-get install -y vim
    apt-get install -y git
    apt-get install -y unzip

    ################
    # REQUIREMENTS #
    ################

    # Update main packages (just in case)
    apt-get update -y

    # Requirements for MSFragger
    apt-get install -y openjdk-19-jre-headless

    # Install Python packages
    apt-get -y install python-is-python3 python3-pip python3-venv
    python -m pip install --upgrade pip
    DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata python3-tk

    # Requeriments for ThermoRawFileParser
    apt-get install -y ca-certificates gnupg
    # install mono (ThermoRawFileParser)
    gpg --homedir /tmp --no-default-keyring --keyring /usr/share/keyrings/mono-official-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
    echo "deb [signed-by=/usr/share/keyrings/mono-official-archive-keyring.gpg] https://download.mono-project.com/repo/ubuntu stable-focal main" | tee /etc/apt/sources.list.d/mono-official-stable.list
    apt-get update -y
    apt-get install -y mono-devel

    # Requirements for RefMod (pyopenms)
    apt-get install -y libglib2.0-0


    #
    # SEARCH_ENGINE ---------------------------------------------------------------------------------------------
    #

    #############
    # MSFRAGGER #
    #############

    # Uncompress MSFragger and rename jar file
    unzip {{SEARCH_HOME}}/MSFragger.zip -d {{SEARCH_HOME}}
    mv {{SEARCH_HOME}}/{{MSF_FILE_NAME}} {{MSF_HOME}}
    mv {{MSF_HOME}}/{{MSF_FILE_NAME}}.jar {{MSF_HOME}}/MSFragger.jar

    ###################
    # THERMORAWPARSER #
    ###################

    # Uncompress thermorawfileparser
    unzip {{SEARCH_HOME}}/ThermoRawFileParser.zip -d {{RAWPARSER_HOME}}

    ##############
    # DECOYPYRAT #
    ##############

    # Clone the repository
    git clone https://github.com/CNIC-Proteomics/bioDataHub.git  --branch {{BIODATAHUB_VERSION}}  {{BIODATAHUB_HOME}}

    # Python environment --
    cd {{BIODATAHUB_HOME}} && python -m venv env
    . {{BIODATAHUB_HOME}}/env/bin/activate && pip install -r {{BIODATAHUB_HOME}}/python_requirements.txt

    ################
    # MZ_EXTRACTOR #
    ################

    # Clone the repository
    git clone https://github.com/CNIC-Proteomics/mz_extractor.git  --branch {{MZEXTRACTOR_VERSION}}  {{MZEXTRACTOR_HOME}}

    # Python environment --
    cd {{MZEXTRACTOR_HOME}} && python -m venv env
    . {{MZEXTRACTOR_HOME}}/env/bin/activate && pip install -r {{MZEXTRACTOR_HOME}}/python_requirements.txt


    # To end the build
    NOW=`date`
    echo "export NOW=\"${NOW}\"" >> $SINGULARITY_ENVIRONMENT

%runscript
    echo "Container was created $NOW"
    echo "Arguments received: $*"
    exec echo "$@"

%test
    # Check if Ubuntu has been installed
    grep -q NAME=\"Ubuntu\" /etc/os-release
    if [ $? -eq 0 ]; then
        echo "Container base is Ubuntu as expected."
    else
        echo "Container base is not Ubuntu."
        exit 1
    fi

    # Check if Python has been installed
    PYTHON_VER=$(python --version | awk '{print $2}' | tr -d '"')
    if [ "${PYTHON_VER}" != "" ]; then
        echo "Python ${PYTHON_VER} has been installed as expected."
    else
        echo "Python has not been installed."
        exit 1
    fi

    # SEARCH_ENGINE ---------------------------------------------------------------------------------------------

    # Check if Java has been installed
    JAVA_VER=$(java -version 2>&1 >/dev/null | egrep "\S+\s+version" | awk '{print $3}' | tr -d '"')
    if [ "${JAVA_VER}" != "" ]; then
        echo "Java ${JAVA_VER} has been installed as expected."
    else
        echo "Java has not been installed."
        exit 1
    fi

    # Check if MSFragger has been installed
    FILE="{{MSF_HOME}}/MSFragger.jar"
    if [ -f "${FILE}" ]; then
        echo "The ${FILE} file exists."
    else
        echo "The ${FILE} file does not exit."
        exit 1
    fi

    # Check if DecoyPYrat has been installed
    DecoyPYrat_test=$(cd {{BIODATAHUB_HOME}} && . env/bin/activate && python src/decoyPYrat.v2.py 2>&1 | grep "usage:")
    if [ "${DecoyPYrat_test}" != "" ]; then
        echo "DecoyPYrat ${DecoyPYrat_test} has been installed as expected."
    else
        echo "DecoyPYrat has not been installed."
        exit 1
    fi

    # Check if mzExtractor has been installed
    mzExtractor_test=$(cd {{MZEXTRACTOR_HOME}} && . env/bin/activate && python mz_extractor.py 2>&1 | grep "usage:")
    if [ "${mzExtractor_test}" != "" ]; then
        echo "mzExtractor ${mzExtractor_test} has been installed as expected."
    else
        echo "mzExtractor has not been installed."
        exit 1
    fi

